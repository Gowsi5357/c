#include <stdio.h>
#include <stdbool.h>
#define MAX 100
typedef struct {
    int arr[MAX];
    int front, rear;
} Queue;
void initialize(Queue *queue) {
    queue->front = 0;
    queue->rear = -1;
}
bool isFull(Queue *queue) {
    return queue->rear == MAX - 1;
}
bool isEmpty(Queue *queue) {
    return queue->front > queue->rear;
}
void enqueue(Queue *queue, int value) {
    if (isFull(queue)) {
        printf("Queue overflow\n");
        return;
    }
    queue->arr[++queue->rear] = value;
}
int dequeue(Queue *queue) {
    if (isEmpty(queue)) {
        printf("Queue underflow\n");
        return -1;
    }
    return queue->arr[queue->front++];
}
void display(Queue *queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty\n");
        return;
    }
    for (int i = queue->front; i <= queue->rear; ++i) {
        printf("%d\n", queue->arr[i]);
    }
}
int main() {
    Queue queue;
    initialize(&queue);
    int choice, value;
    do {
        printf("1. Enqueue\n2. Dequeue\n3. Display\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter value to enqueue: ");
                scanf("%d", &value);
                enqueue(&queue, value);
                break;
            case 2:
                printf("Dequeued value: %d\n", dequeue(&queue));
                break;
            case 3:
                display(&queue);
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice\n");
        }
    } while (choice != 4);
    return 0;
}
